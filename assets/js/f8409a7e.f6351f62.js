"use strict";(self.webpackChunkgcp_workshop=self.webpackChunkgcp_workshop||[]).push([[206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>k,default:()=>T,frontMatter:()=>v,metadata:()=>h,toc:()=>x});var a=n(7462),r=n(7294),l=n(3905),o=n(6010),u=n(2389),i=n(7392),s=n(7094),c=n(2466);const p="tabList__CuJ",d="tabItem_LNqP";function m(e){var t,n;const{lazy:l,block:u,defaultValue:m,values:g,groupId:b,className:f}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,i.l)(k,((e,t)=>e.value===t.value));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:x,setTabGroupChoices:N}=(0,s.U)(),[T,w]=(0,r.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:I}=(0,c.o5)();if(null!=b){const e=x[b];null!=e&&e!==T&&k.some((t=>t.value===e))&&w(e)}const E=e=>{const t=e.currentTarget,n=O.indexOf(t),a=k[n].value;a!==T&&(I(t),w(a),null!=b&&N(b,String(a)))},D=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=O.indexOf(e.currentTarget)+1;n=null!=(a=O[t])?a:O[0];break}case"ArrowLeft":{var r;const t=O.indexOf(e.currentTarget)-1;n=null!=(r=O[t])?r:O[O.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},f)},k.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>O.push(e),onKeyDown:D,onFocus:E,onClick:E},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function g(e){const t=(0,u.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}const b="tabItem_Ymn6";function f(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(b,a),hidden:n},t)}const v={sidebar_position:1},k="Tutorial Intro",h={unversionedId:"intro",id:"intro",title:"Tutorial Intro",description:"|Workshop goal| Learn how to use Google Cloud and MongoDB Atlas together|",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"MongoDB Atlas",permalink:"/docs/category/mongodb-atlas"}},y={},x=[{value:"Getting Started",id:"getting-started",level:2},{value:"Configure graphQL and Google API values",id:"configure-graphql-and-google-api-values",level:3},{value:"Create Function",id:"create-function",level:3},{value:"Expected input/output",id:"expected-inputoutput",level:4},{value:"Create Trigger",id:"create-trigger",level:3},{value:"Expected input/output",id:"expected-inputoutput-1",level:4}],N={toc:x};function T(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tutorial-intro"},"Tutorial Intro"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Workshop goal"),(0,l.kt)("th",{parentName:"tr",align:null},"Learn how to use Google Cloud and MongoDB Atlas together"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"What you'll learn"),(0,l.kt)("td",{parentName:"tr",align:null},"How to setup the Atlas developer data platform to work with Google Cloud APIs and Cloud Run")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"What tools you'll need"),(0,l.kt)("td",{parentName:"tr",align:null},"Atlas free tier, Google Cloud project")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Time to complete"),(0,l.kt)("td",{parentName:"tr",align:null},"2.5h")))),(0,l.kt)("p",null,"MongoDB Atlas is the best way to deploy, manage, and grow MongoDB on Google Cloud!"),(0,l.kt)("h2",{id:"getting-started"},"Getting Started"),(0,l.kt)("h3",{id:"configure-graphql-and-google-api-values"},"Configure graphQL and Google API values"),(0,l.kt)("p",null,"In your app services application will need to go to the schema tab and configure collections: ",(0,l.kt)("inlineCode",{parentName:"p"},"cakes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"comments"),"."),(0,l.kt)("p",null,"In the values tab add a value and a secret for the Google API url:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'gcpSentimentAnalyseURL="https://language.googleapis.com/v1/documents:analyzeSentiment"\n\ngcpAPIKey=<YOUR_API_KEY>\n')),(0,l.kt)("h3",{id:"create-function"},"Create Function"),(0,l.kt)("p",null,"You will need to go to the function tab and configure function that queries Google NLP for a comment sentiment (",(0,l.kt)("inlineCode",{parentName:"p"},"analyseComment"),"):"),(0,l.kt)("h4",{id:"expected-inputoutput"},"Expected input/output"),(0,l.kt)(g,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(f,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   {\n     "_id":{"$oid":"62d3e173f6cbe28877663a85"},\n   "cakeId":{"$oid":"62d3cb0606fb4ffe788463a7"},\n   "date":{"$date":{"$numberLong":"1658052978841"}},\n   "name":"Stanimira",\n   "text":"eh, it\'s ok"\n   }\n'))),(0,l.kt)(f,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   {"documentSentiment":{"magnitude":{"$numberDouble":"0.0"},\n   "score":{"$numberDouble":"0.0"}},\n   "language":"en-US",\n   "sentences":[{"text":{"content":"eh, it\'s ok","beginOffset":{"$numberDouble":"-1.0"}},\n                  "sentiment":{"magnitude":{"$numberDouble":"0.0"},\n                  "score":{"$numberDouble":"0.0"}}}]}\n')))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Hint"),(0,l.kt)("div",null,(0,l.kt)(g,{defaultValue:"hint",values:[{label:"Hint",value:"hint"},{label:"Suggested Answer",value:"answer"}],mdxType:"Tabs"},(0,l.kt)(f,{value:"hint",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   exports = async function(comment){\n  \n  //get("gcpSentimentAnalyseURL")\n  \n  //get("gcpAPIKey")\n\n  \n  //post({GOOGLE})\n  // The response body is a BSON.Binary object. Parse it and return.\n  //return response\n};\n'))),(0,l.kt)(f,{value:"answer",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   exports = async function(comment){\n  \n  const URL = context.values.get("gcpSentimentAnalyseURL")\n  \n  const gcpAPIKey = context.values.get("gcpAPIKey")\n\n  \n  const response = await context.http.post({\n    url: `${URL}?key=${gcpAPIKey}`,\n    body: {\n          "document": {\n        "type": "PLAIN_TEXT",\n        "language": "en-US",\n        "content": comment\n  }\n},\n    encodeBodyAsJSON: true\n  })\n  // The response body is a BSON.Binary object. Parse it and return.\n  return JSON.parse(response.body.text());\n};\n')))))),(0,l.kt)("h3",{id:"create-trigger"},"Create Trigger"),(0,l.kt)("p",null,"You will need to go to the triggers tab and configure trigger that fires on a new comment insert and call the function (\n",(0,l.kt)("inlineCode",{parentName:"p"},"analyseComment"),":"),(0,l.kt)("h4",{id:"expected-inputoutput-1"},"Expected input/output"),(0,l.kt)(g,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(f,{value:"input",mdxType:"TabItem"},(0,l.kt)("p",null,"Inserted:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   {\n     "_id":{"$oid":"62d3e173f6cbe28877663a85"},\n   "cakeId":{"$oid":"62d3cb0606fb4ffe788463a7"},\n   "date":{"$date":{"$numberLong":"1658052978841"}},\n   "name":"Stanimira",\n   "text":"eh, it\'s ok"\n   }\n'))),(0,l.kt)(f,{value:"output",mdxType:"TabItem"},(0,l.kt)("p",null,"Document after trigger:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   {\n    "_id":{"$oid":"62d3e173f6cbe28877663a85"},\n   "cakeId":{"$oid":"62d3cb0606fb4ffe788463a7"},\n   "date":{"$date":{"$numberLong":"1658052978841"}},\n   "name":"Stanimira",\n   "text":"eh, it\'s ok",\n   "documentSentiment": {"magnitude":{"$numberDouble":"0.0"},\n   "score":{"$numberDouble":"0.0"}},\n   "language":"en-US",\n   "sentences":[{"text":{"content":"eh, it\'s ok","beginOffset":{"$numberDouble":"-1.0"}},\n                  "sentiment":{"magnitude":{"$numberDouble":"0.0"},\n                  "score":{"$numberDouble":"0.0"}}}]}\n')))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Hint"),(0,l.kt)("div",null,(0,l.kt)(g,{defaultValue:"hint",values:[{label:"Hint",value:"hint"},{label:"Suggested Answer",value:"answer"}],mdxType:"Tabs"},(0,l.kt)(f,{value:"hint",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   exports = async function(changeEvent) {\n \n   // get fullDocument \n\n   //Execute analyseComment on text field\n   \n   // set result.documentSentiment on the relevant comment document in "comments" collection.\n   \n   \n};\n'))),(0,l.kt)(f,{value:"answer",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'   exports = async function(changeEvent) {\n \n   const fullDocument = changeEvent.fullDocument;\n   const comments = context.services.get("mongodb-atlas").db("Bakery").collection("comments");\n   \n   const result = await context.functions.execute("analyseComment", fullDocument.text);\n    \n   await comments.updateOne({"_id" : fullDocument._id }, {$set : { "documentSentiment" : result.documentSentiment}});\n   \n   \n};\n')))))),(0,l.kt)("p",null,"Get started with the app now."))}T.isMDXComponent=!0}}]);