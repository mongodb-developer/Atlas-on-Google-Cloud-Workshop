"use strict";(self.webpackChunkgcp_workshop=self.webpackChunkgcp_workshop||[]).push([[206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),i=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,g=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>f,default:()=>O,frontMatter:()=>h,metadata:()=>y,toc:()=>w});var a=n(7462),r=n(7294),o=n(3905),l=n(6010),s=n(2389),u=n(7392),i=n(7094),c=n(2466);const p="tabList__CuJ",d="tabItem_LNqP";function m(e){var t,n;const{lazy:o,block:s,defaultValue:m,values:g,groupId:b,className:v}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,u.l)(f,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(t=null!=m?m:null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)?t:h[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:T}=(0,i.U)(),[O,x]=(0,r.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=b){const e=w[b];null!=e&&e!==O&&f.some((t=>t.value===e))&&x(e)}const I=e=>{const t=e.currentTarget,n=N.indexOf(t),a=f[n].value;a!==O&&(E(t),x(a),null!=b&&T(b,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=N.indexOf(e.currentTarget)+1;n=null!=(a=N[t])?a:N[0];break}case"ArrowLeft":{var r;const t=N.indexOf(e.currentTarget)-1;n=null!=(r=N[t])?r:N[N.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},v)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>N.push(e),onKeyDown:P,onFocus:I,onClick:I},o,{className:(0,l.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function g(e){const t=(0,s.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}const b="tabItem_Ymn6";function v(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,l.Z)(b,a),hidden:n},t)}const h={sidebar_position:1},f="Tutorial Intro",y={unversionedId:"intro",id:"intro",title:"Tutorial Intro",description:"Getting Started",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"hey!",permalink:"/docs/hello"},next:{title:"Tutorial - Basics",permalink:"/docs/category/tutorial---basics"}},k={},w=[{value:"Getting Started",id:"getting-started",level:2},{value:"Create an Atlas project and cluster",id:"create-an-atlas-project-and-cluster",level:3},{value:"Create a app services application (<code>Bakery</code>)",id:"create-a-app-services-application-bakery",level:3},{value:"Create a charts dashboard",id:"create-a-charts-dashboard",level:3},{value:"Configure graphQL and Google API values",id:"configure-graphql-and-google-api-values",level:3},{value:"Create Functions",id:"create-functions",level:3},{value:"Expected input/output",id:"expected-inputoutput",level:4}],T={toc:w};function O(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial-intro"},"Tutorial Intro"),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("h3",{id:"create-an-atlas-project-and-cluster"},"Create an Atlas project and cluster"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Toggle for atlas documentation"),(0,o.kt)("div",null,(0,o.kt)("iframe",{height:"1000px",width:"100%",src:"https://www.mongodb.com/docs/atlas/getting-started/"}))),(0,o.kt)("h3",{id:"create-a-app-services-application-bakery"},"Create a app services application (",(0,o.kt)("inlineCode",{parentName:"h3"},"Bakery"),")"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Toggle for app services documentation"),(0,o.kt)("div",null,(0,o.kt)("iframe",{height:"1000px",width:"100%",src:"https://www.mongodb.com/docs/atlas/app-services/manage-apps/create/create-with-ui/"}))),(0,o.kt)("h3",{id:"create-a-charts-dashboard"},"Create a charts dashboard"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Toggle for charts documentation"),(0,o.kt)("div",null,(0,o.kt)("iframe",{height:"1000px",width:"100%",src:"https://www.mongodb.com/docs/atlas/app-services/manage-apps/create/create-with-ui/"}))),(0,o.kt)("h3",{id:"configure-graphql-and-google-api-values"},"Configure graphQL and Google API values"),(0,o.kt)("p",null,"You will need to go to the graphQL tab and configure collections: ",(0,o.kt)("inlineCode",{parentName:"p"},"cakes"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"comments")),(0,o.kt)("p",null,"In the values tab add a value and a secret for the Google API url:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'gcpSentimentAnalyseURL="https://language.googleapis.com/v1/documents:analyzeSentiment"\n\ngcpAPIKey=<YOUR_API_KEY>\n')),(0,o.kt)("h3",{id:"create-functions"},"Create Functions"),(0,o.kt)("p",null,"You will need to go to the function tab and configure function that queries Google NLP for a comment sentiment (",(0,o.kt)("inlineCode",{parentName:"p"},"analyseComment"),"):"),(0,o.kt)("h4",{id:"expected-inputoutput"},"Expected input/output"),(0,o.kt)(g,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(v,{value:"input",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'   {\n     "_id":{"$oid":"62d3e173f6cbe28877663a85"},\n   "cakeId":{"$oid":"62d3cb0606fb4ffe788463a7"},\n   "date":{"$date":{"$numberLong":"1658052978841"}},\n   "name":"Stanimira",\n   "text":"eh, it\'s ok"\n   }\n'))),(0,o.kt)(v,{value:"output",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'   {"documentSentiment":{"magnitude":{"$numberDouble":"0.0"},\n   "score":{"$numberDouble":"0.0"}},\n   "language":"en-US",\n   "sentences":[{"text":{"content":"eh, it\'s ok","beginOffset":{"$numberDouble":"-1.0"}},\n                  "sentiment":{"magnitude":{"$numberDouble":"0.0"},\n                  "score":{"$numberDouble":"0.0"}}}]}\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Hint"),(0,o.kt)("div",null,(0,o.kt)(g,{defaultValue:"hint",values:[{label:"Hint",value:"hint"},{label:"Suggested Answer",value:"answer"}],mdxType:"Tabs"},(0,o.kt)(v,{value:"hint",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'   exports = async function(comment){\n  \n  //get("gcpSentimentAnalyseURL")\n  \n  //get("gcpAPIKey")\n\n  \n  //post({GOOGLE})\n  // The response body is a BSON.Binary object. Parse it and return.\n  //return response\n};\n'))),(0,o.kt)(v,{value:"answer",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'   exports = async function(comment){\n  \n  const URL = context.values.get("gcpSentimentAnalyseURL")\n  \n  const gcpAPIKey = context.values.get("gcpAPIKey")\n\n  \n  const response = await context.http.post({\n    url: `${URL}?key=${gcpAPIKey}`,\n    body: {\n          "document": {\n        "type": "PLAIN_TEXT",\n        "language": "en-US",\n        "content": comment\n  }\n},\n    encodeBodyAsJSON: true\n  })\n  // The response body is a BSON.Binary object. Parse it and return.\n  return JSON.parse(response.body.text());\n};\n')))))),(0,o.kt)("p",null,"Get started with the app now."))}O.isMDXComponent=!0}}]);